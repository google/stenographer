// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steno.proto

package steno

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PcapRequest struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChunkSize            int64    `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	MaxSize              int64    `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	Query                string   `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcapRequest) Reset()         { *m = PcapRequest{} }
func (m *PcapRequest) String() string { return proto.CompactTextString(m) }
func (*PcapRequest) ProtoMessage()    {}
func (*PcapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a047459a1ab3dd2b, []int{0}
}

func (m *PcapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcapRequest.Unmarshal(m, b)
}
func (m *PcapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcapRequest.Marshal(b, m, deterministic)
}
func (m *PcapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcapRequest.Merge(m, src)
}
func (m *PcapRequest) XXX_Size() int {
	return xxx_messageInfo_PcapRequest.Size(m)
}
func (m *PcapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PcapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PcapRequest proto.InternalMessageInfo

func (m *PcapRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PcapRequest) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *PcapRequest) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *PcapRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type PcapResponse struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Pcap                 []byte   `protobuf:"bytes,2,opt,name=pcap,proto3" json:"pcap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcapResponse) Reset()         { *m = PcapResponse{} }
func (m *PcapResponse) String() string { return proto.CompactTextString(m) }
func (*PcapResponse) ProtoMessage()    {}
func (*PcapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a047459a1ab3dd2b, []int{1}
}

func (m *PcapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcapResponse.Unmarshal(m, b)
}
func (m *PcapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcapResponse.Marshal(b, m, deterministic)
}
func (m *PcapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcapResponse.Merge(m, src)
}
func (m *PcapResponse) XXX_Size() int {
	return xxx_messageInfo_PcapResponse.Size(m)
}
func (m *PcapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PcapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PcapResponse proto.InternalMessageInfo

func (m *PcapResponse) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PcapResponse) GetPcap() []byte {
	if m != nil {
		return m.Pcap
	}
	return nil
}

func init() {
	proto.RegisterType((*PcapRequest)(nil), "steno.PcapRequest")
	proto.RegisterType((*PcapResponse)(nil), "steno.PcapResponse")
}

func init() { proto.RegisterFile("steno.proto", fileDescriptor_a047459a1ab3dd2b) }

var fileDescriptor_a047459a1ab3dd2b = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x8d, 0xdd, 0x55, 0x77, 0x36, 0x07, 0x19, 0x3d, 0x54, 0x41, 0x58, 0x7a, 0xea, 0xa9,
	0x88, 0x7a, 0xf3, 0x23, 0x78, 0x91, 0xf4, 0x03, 0x48, 0xac, 0x83, 0x0d, 0xd2, 0x26, 0xcd, 0x1f,
	0xa9, 0xfd, 0xf4, 0xd2, 0xc9, 0x45, 0x61, 0x6f, 0xf3, 0xde, 0x83, 0xf7, 0xcb, 0x0b, 0xec, 0x43,
	0xa4, 0xd1, 0x36, 0xce, 0xdb, 0x68, 0x71, 0xcb, 0xa2, 0xb2, 0xb0, 0x7f, 0xed, 0xb4, 0x53, 0x34,
	0x25, 0x0a, 0x11, 0x2f, 0xa1, 0x48, 0xe6, 0xa3, 0x14, 0x07, 0x51, 0xef, 0xd4, 0x7a, 0xe2, 0x1d,
	0x40, 0xd7, 0xa7, 0xf1, 0xeb, 0x2d, 0x98, 0x85, 0xca, 0xd3, 0x83, 0xa8, 0x0b, 0xb5, 0x63, 0xa7,
	0x35, 0x0b, 0xe1, 0x0d, 0x5c, 0x0c, 0x7a, 0xce, 0x61, 0xc1, 0xe1, 0xf9, 0xa0, 0x67, 0x8e, 0xae,
	0x61, 0x3b, 0x25, 0xf2, 0x3f, 0xe5, 0x86, 0xdb, 0xb2, 0xa8, 0x9e, 0x40, 0x66, 0x60, 0x70, 0x76,
	0x0c, 0x74, 0x84, 0x88, 0xb0, 0x71, 0x9d, 0x76, 0xcc, 0x92, 0x8a, 0xef, 0x87, 0x17, 0x90, 0xed,
	0xfa, 0xde, 0x4f, 0xaf, 0x5d, 0x4f, 0x1e, 0x9f, 0x41, 0x2a, 0x8a, 0xde, 0xd0, 0x37, 0xad, 0x6d,
	0x88, 0x4d, 0xde, 0xf6, 0x67, 0xcb, 0xed, 0xd5, 0x3f, 0x2f, 0xe3, 0xaa, 0x93, 0x7b, 0xf1, 0x7e,
	0xc6, 0x3f, 0xf0, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x01, 0xa4, 0xf0, 0xd9, 0x10, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StenographerClient is the client API for Stenographer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StenographerClient interface {
	RetrievePcap(ctx context.Context, in *PcapRequest, opts ...grpc.CallOption) (Stenographer_RetrievePcapClient, error)
}

type stenographerClient struct {
	cc *grpc.ClientConn
}

func NewStenographerClient(cc *grpc.ClientConn) StenographerClient {
	return &stenographerClient{cc}
}

func (c *stenographerClient) RetrievePcap(ctx context.Context, in *PcapRequest, opts ...grpc.CallOption) (Stenographer_RetrievePcapClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stenographer_serviceDesc.Streams[0], "/steno.Stenographer/RetrievePcap", opts...)
	if err != nil {
		return nil, err
	}
	x := &stenographerRetrievePcapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stenographer_RetrievePcapClient interface {
	Recv() (*PcapResponse, error)
	grpc.ClientStream
}

type stenographerRetrievePcapClient struct {
	grpc.ClientStream
}

func (x *stenographerRetrievePcapClient) Recv() (*PcapResponse, error) {
	m := new(PcapResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StenographerServer is the server API for Stenographer service.
type StenographerServer interface {
	RetrievePcap(*PcapRequest, Stenographer_RetrievePcapServer) error
}

func RegisterStenographerServer(s *grpc.Server, srv StenographerServer) {
	s.RegisterService(&_Stenographer_serviceDesc, srv)
}

func _Stenographer_RetrievePcap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PcapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StenographerServer).RetrievePcap(m, &stenographerRetrievePcapServer{stream})
}

type Stenographer_RetrievePcapServer interface {
	Send(*PcapResponse) error
	grpc.ServerStream
}

type stenographerRetrievePcapServer struct {
	grpc.ServerStream
}

func (x *stenographerRetrievePcapServer) Send(m *PcapResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Stenographer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "steno.Stenographer",
	HandlerType: (*StenographerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RetrievePcap",
			Handler:       _Stenographer_RetrievePcap_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "steno.proto",
}
